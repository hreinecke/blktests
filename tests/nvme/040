#!/bin/bash
# SPDX-License-Identifier: GPL-2.0+
# Copyright (C) 2018 Johannes Thumshirn, Hannes Reinecke, SUSE Linux GmbH
#
# Reproducer for nvme-fcloop
#

. tests/nvme/rc
. common/fcloop

DESCRIPTION="create nvme-fcloop with two ports and connect/disconnect"

requires() {
	_have_program nvme && \
		_have_modules loop nvme-fcloop nvmet nvmet-fc && \
		_have_configfs
}

test() {
	local subsys="blktests-subsystem-1"
	local remote_wwnn1="0x100140111111dbcc"
	local remote_wwpn1="0x200140111111dbcc"
	local remote_wwnn2="0x100140111111dbcd"
	local remote_wwpn2="0x200140111111dbcd"
	local host_wwnn1="0x100140111111dac8"
	local host_wwpn1="0x200140111111dac8"
	local host_wwnn2="0x100140111111dac9"
	local host_wwpn2="0x200140111111dac9"

	echo "Running ${TEST_NAME}"

	modprobe nvmet-fc
	modprobe nvme-fcloop

	_nvme_fcloop_add_tport ${remote_wwnn1} ${remote_wwpn1}
	_nvme_fcloop_add_tport ${remote_wwnn2} ${remote_wwpn2}

	local port1
	local remote_traddr1
	remote_traddr1=$(printf "nn-%s:pn-%s" "${remote_wwnn1}" "${remote_wwpn1}")
	port1=$(_create_nvmet_port "fc" "${remote_traddr1}")
	ag1="$(_create_nvmet_anagroup "${port1}")"

	local port2
	local remote_traddr2
	remote_traddr2=$(printf "nn-%s:pn-%s" "${remote_wwnn2}" "${remote_wwpn2}")
	port2=$(_create_nvmet_port "fc" "${remote_traddr2}")
	ag2="$(_create_nvmet_anagroup "${port2}")"

	truncate -s 1G "$TMPDIR/img"

	local loop_dev
	loop_dev="$(losetup -f --show "$TMPDIR/img")"

	_create_nvmet_subsystem "${subsys}" "${loop_dev}" \
		"91fdba0d-f87b-4c25-b80f-db7be1418b9e" "1"
	_add_nvmet_subsys_to_port "${port1}" "${subsys}"
	_add_nvmet_subsys_to_port "${port2}" "${subsys}"

	_set_nvmet_anagroup_state "${port2}" "1" "inaccessible"
	_set_nvmet_anagroup_state "${port2}" "2" "optimized"

	_nvme_fcloop_add_lport ${host_wwnn1} ${host_wwpn1}
	_nvme_fcloop_add_lport ${host_wwnn2} ${host_wwpn2}

	_nvme_fcloop_add_rport ${host_wwnn1} ${host_wwpn1} \
		${remote_wwnn1} ${remote_wwpn1}
	_nvme_fcloop_add_rport ${host_wwnn2} ${host_wwpn2} \
		${remote_wwnn2} ${remote_wwpn2}

	nvmedev="$(_find_nvme_ns 91fdba0d-f87b-4c25-b80f-db7be1418b9e)"
	if [ -z "$nvmedev" ] ; then
		local host_traddr1
		host_traddr1=$(printf "nn-%s:pn-%s" \
				      "${host_wwnn1}" "${host_wwpn1}")

		nvme connect -t fc -a "${remote_traddr1}"  \
		     -w "${host_traddr1}" \
		     -n "${subsys}"

		local host_traddr2
		host_traddr2=$(printf "nn-%s:pn-%s" \
				      "${host_wwnn2}" "${host_wwpn2}")

		nvme connect -t fc -a "${remote_traddr2}"  \
		     -w "${host_traddr2}" \
		     -n "${subsys}"

		nvmedev="$(_find_nvme_ns 91fdba0d-f87b-4c25-b80f-db7be1418b9e)"
	fi
	# Allow I/O to settle
	udevadm settle

	nvme disconnect -n "${subsys}"

	_remove_nvmet_subsystem_from_port "${port1}" "${subsys}"
	_remove_nvmet_subsystem_from_port "${port2}" "${subsys}"
	_remove_nvmet_subsystem "${subsys}"
	_remove_nvmet_anagroup "${port1}" "${ag1}"
	_remove_nvmet_port "${port1}"
	_remove_nvmet_anagroup "${port2}" "${ag2}"
	_remove_nvmet_port "${port2}"

	losetup -d "$loop_dev"
	rm "$TMPDIR/img"

	# Fixme: need to wait for RCU grace period
	sleep 5

	_nvme_fcloop_del_rport "${host_wwnn1}" "${host_wwpn1}" \
		"${remote_wwnn1}" "${remote_wwpn1}"
	_nvme_fcloop_del_rport "${host_wwnn2}" "${host_wwpn2}" \
		"${remote_wwnn2}" "${remote_wwpn2}"

	_nvme_fcloop_del_tport "${remote_wwnn1}" "${remote_wwpn1}"
	_nvme_fcloop_del_tport "${remote_wwnn2}" "${remote_wwpn2}"

	_nvme_fcloop_del_lport "${host_wwnn1}" "${host_wwpn1}"
	_nvme_fcloop_del_lport "${host_wwnn2}" "${host_wwpn2}"

	echo "Test complete"
}
