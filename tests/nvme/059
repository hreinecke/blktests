#!/bin/bash
# SPDX-License-Identifier: GPL-3.0+
# Copyright (C) 2024 Hannes Reinecke (SUSE) <hare@suse.de>
#
# Test startup with inaccessible namespaces

. tests/nvme/rc

DESCRIPTION="test startup with inaccessible namespaces"

requires() {
	_nvme_requires
	_have_loop
	_require_nvme_trtype_is_fabrics
}

set_conditions() {
	_set_nvme_trtype "$@"
}

_setup_ana() {
	local portno=0

	for port in "$@"; do
		if (( portno == 0 )); then
			_setup_nvmet_port_ana "${port}" 1 "optimized"
			_setup_nvmet_port_ana "${port}" 2 "inaccessible"
			_setup_nvmet_port_ana "${port}" 3 "inaccessible"
		elif (( portno == 1 )); then
			_setup_nvmet_port_ana "${port}" 1 "non-optimized"
			_setup_nvmet_port_ana "${port}" 2 "inaccessible"
			_setup_nvmet_port_ana "${port}" 3 "inaccessible"
		elif (( portno == 2 )); then
			_setup_nvmet_port_ana "${port}" 1 "inaccessible"
			_setup_nvmet_port_ana "${port}" 2 "optimized"
			_setup_nvmet_port_ana "${port}" 3 "inaccessible"
		elif (( portno == 3 )); then
			_setup_nvmet_port_ana "${port}" 1 "inaccessible"
			_setup_nvmet_port_ana "${port}" 2 "non-optimized"
			_setup_nvmet_port_ana "${port}" 3 "inaccessible"
		elif (( portno == 4 )); then
			_setup_nvmet_port_ana "${port}" 1 "inaccessible"
			_setup_nvmet_port_ana "${port}" 2 "inaccessible"
			_setup_nvmet_port_ana "${port}" 3 "optimized"
		else
			_setup_nvmet_port_ana "${port}" 1 "inaccessible"
			_setup_nvmet_port_ana "${port}" 2 "inaccessible"
			_setup_nvmet_port_ana "${port}" 3 "non-optimized"
		fi
		portno=$(( portno + 1 ))
	done
}

test() {
	echo "Running ${TEST_NAME}"

	_setup_nvmet

	local d i n port
	local -a ports
	local -a uuids
	local num_namespaces=3

	_nvmet_target_setup --ports 4 --blkdev none

	for ((d = 1; d <= num_namespaces; d++)); do
		local file_path
		local blkdev
		local uuid

		file_path="${TMPDIR}/img${d}"
		truncate -s "${NVME_IMG_SIZE}" "${file_path}"
		blkdev="$(losetup -f --show "${file_path}")"
		uuid="$(uuidgen)"
		uuids+=("$uuid")
		_create_nvmet_ns --nsid "${d}" --blkdev "${blkdev}" \
				 --uuid "${uuid}" --grpid "${d}" > /dev/null
	done

	_get_nvmet_ports "${def_subsysnqn}" ports
	for port in "${ports[@]}"; do
		_setup_nvmet_port_ana "${port}" 1 "inaccessible"
		_setup_nvmet_port_ana "${port}" 2 "inaccessible"
		_setup_nvmet_port_ana "${port}" 3 "inaccessible"
	done

	for port in "${ports[@]}"; do
		_nvme_connect_subsys --port "${port}"
	done

	num_ns=0
	for u in "${uuids[@]}"; do
		ns=$(_find_nvme_ns "${u}")
		if [ -n "${ns}" ]; then
			num_ns=$(expr $num_ns + 1)
		fi
	done
	echo "${num_ns} namespaces active"

	echo "switch ANA group 3 to 'optimized'"
	for port in "${ports[@]}"; do
		_setup_nvmet_port_ana "${port}" 3 "optimized"
	done

	num_ns=0
	for u in "${uuids[@]}"; do
		ns=$(_find_nvme_ns "${u}")
		if [ -n "${ns}" ]; then
			num_ns=$(expr $num_ns + 1)
		fi
	done
	echo "${num_ns} namespaces active"

	echo "switch ANA group 2 to 'optimized'"
	for port in "${ports[@]}"; do
		_setup_nvmet_port_ana "${port}" 2 "optimized"
	done

	num_ns=0
	for u in "${uuids[@]}"; do
		ns=$(_find_nvme_ns "${u}")
		if [ -n "${ns}" ]; then
			num_ns=$(expr $num_ns + 1)
		fi
	done
	echo "${num_ns} namespaces active"

	echo "switch ANA group 1 to 'optimized'"
	for port in "${ports[@]}"; do
		_setup_nvmet_port_ana "${port}" 1 "optimized"
	done

	num_ns=0
	for u in "${uuids[@]}"; do
		ns=$(_find_nvme_ns "${u}")
		if [ -n "${ns}" ]; then
			num_ns=$(expr $num_ns + 1)
		fi
	done
	echo "${num_ns} namespaces active"

	_nvme_disconnect_subsys
	_nvmet_target_cleanup

	echo "Test complete"
}
